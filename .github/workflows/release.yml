name: Publish from last Build

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to create/release (e.g. v0.1.5)"
        required: true
      branch:
        description: "Which branch's last successful Build to use"
        required: false
        default: "main"
      title:
        description: "Release title (optional, defaults to tag)"
        required: false
      notes:
        description: "Release notes (optional)"
        required: false

permissions:
  contents: write  # needed to create tags & releases

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for tagging)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find last successful 'Build MicroAlign' run on branch
        id: find
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BRANCH="${{ inputs.branch }}"
          # Grab the latest successful run id for the named workflow & branch
          RUN_ID=$(gh run list \
            --workflow "Build MicroAlign" \
            --branch "$BRANCH" \
            --status success \
            -L 1 \
            --json databaseId \
            -q '.[0].databaseId')

          if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
            echo "No successful 'Build MicroAlign' run found on branch '$BRANCH'."
            exit 1
          fi

          echo "Using Build run-id: $RUN_ID"
          echo "run_id=$RUN_ID" >> "$GITHUB_OUTPUT"

      - name: Download artifacts from that build
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ steps.find.outputs.run_id }}
          path: dist
          merge-multiple: true

      - name: List downloaded payload
        run: ls -lah dist

      - name: Create tag (if it doesn't already exist)
        run: |
          TAG="${{ inputs.tag }}"
          git fetch --tags
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          name: ${{ inputs.title != '' && inputs.title || inputs.tag }}
          body: ${{ inputs.notes }}
          generate_release_notes: true
          files: |
            dist/*.zip
            dist/*.tar.gz
