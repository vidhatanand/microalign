name: Publish from last Build

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to create/release (e.g. v0.1.5)"
        required: true
      branch:
        description: "Branch to search for the last successful Build run"
        required: false
        default: "main"
      run_id:
        description: "Optional: specific Build workflow run-id to use"
        required: false
      title:
        description: "Release title (defaults to tag)"
        required: false
      notes:
        description: "Release notes (optional)"
        required: false

permissions:
  contents: write   # create tags & releases
  actions: read     # download artifacts from another run

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for tagging)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve the Build run to use (via REST)
        id: resolve
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          if [ -n "${{ inputs.run_id }}" ]; then
            echo "run_id=${{ inputs.run_id }}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          BRANCH="${{ inputs.branch }}"
          echo "Searching for a successful 'Build MicroAlign' run on branch: $BRANCH with artifacts..."

          # Grab the workflow id for 'Build MicroAlign'
          WF_ID=$(gh api repos/$REPO/actions/workflows \
            -q '.workflows[] | select(.name=="Build MicroAlign") | .id')
          if [ -z "$WF_ID" ]; then
            echo "Could not find a workflow named 'Build MicroAlign'."
            exit 1
          fi

          # List last 20 successful runs on that branch (newest first)
          RUNS_JSON=$(gh api repos/$REPO/actions/workflows/$WF_ID/runs \
            -F branch="$BRANCH" -F status=success -F per_page=20)
          RUN_IDS=$(echo "$RUNS_JSON" | jq -r '.workflow_runs[].id')

          CHOSEN=""
          for RID in $RUN_IDS; do
            # Check artifacts count for this run
            COUNT=$(gh api repos/$REPO/actions/runs/$RID/artifacts -q '.total_count')
            echo "Run $RID artifacts: $COUNT"
            if [ "$COUNT" -gt 0 ]; then
              CHOSEN="$RID"
              break
            fi
          done

          if [ -z "$CHOSEN" ]; then
            echo "No successful runs with artifacts found on branch '$BRANCH'."
            exit 1
          fi

          echo "Using run_id=$CHOSEN"
          echo "run_id=$CHOSEN" >> "$GITHUB_OUTPUT"

      - name: Download artifacts from chosen Build run
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ steps.resolve.outputs.run_id }}
          path: dist
          merge-multiple: true

      - name: Verify artifacts
        run: |
          if [ ! -d dist ]; then
            echo "dist/ missing after download."
            exit 1
          fi
          echo "Downloaded files:"
          ls -lah dist || true
          COUNT=$(ls -1 dist/* 2>/dev/null | wc -l | tr -d ' ')
          if [ "$COUNT" -eq 0 ]; then
            echo "No files in dist/. Make sure the Build workflow uploaded bundles."
            exit 1
          fi

      - name: Create tag if missing
        run: |
          TAG="${{ inputs.tag }}"
          git fetch --tags
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping tag creation."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Create GitHub Release (attach downloaded bundles)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          name: ${{ inputs.title != '' && inputs.title || inputs.tag }}
          body: ${{ inputs.notes }}
          generate_release_notes: true
          files: |
            dist/*.zip
            dist/*.tar.gz
